import sys
import utils

def ab_to_s1s2(W, s):
    """Converts a Dumas-stecker string (e.g. ab) to a sage Weyl group element (e.g. s1*s2)"""
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    gens = W.simple_reflections()
    word = W.one()
    for c in s:
        word *= gens[alphabet.index(c)+1]
    return word

def s1s2_to_ab(W, x):
    """Converts a Weyl group element (e.g. s1*s2) to a Dumas-Stecker string ('ab')"""
    # TODO: Assumes compatible ordering
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    elt=""
    if x==W.one():
        return "1"
    x = x.__repr__().split("*")
    for g in x:
        n = int(g[1:])
        elt += alphabet[n-1]
    return elt

def principal_ideal(W,x):
    """Dumas - principal ideal in W generated by x"""
    return W.bruhat_interval(W.one(),x)

def union_ideal(I,G,x):
    """Take the union of an ideal and the principal ideal generated by x."""
    L = principal_ideal(G,x)
    for x in L:
        I.add(x)
    return I

def generating_set(W,I):
    """Given an ideal I in a Weyl group W, return its minimal generating set."""
    gens = W.simple_reflections()
    I_gens = set()
    for x in I:
        is_gen = True
        for g in gens:
            # If g*x is an upper cover of x, then it's not a generator.
            if g*x in I and (g*x).length() > x.length():
                is_gen = False
                break
        if is_gen:
            I_gens.add(x)
    return I_gens
        

def perp(W, I):
    """Given a Weyl group W and an ideal I, calculates w0*I_C (longest elt times the complement of I)"""
    w0 = W.long_element()
    I_C = set(principal_ideal(W,w0)) - I
    return {w0*x for x in I_C}


# Actual script starts here...
# TODO: maybe move the functions to utils?

if len(sys.argv) < 2:
    raise TypeError("Requires an input arg, e.g. 'sage intersection.sage A3.json'")

infile = sys.argv[1]

d = utils.load_json_data(infile)
t = d["type"]
cartan = [t[0],int(t[1:])]
G = WeylGroup(cartan, "s")# * WeylGroup(cartan, "s")


core = set(principal_ideal(G,G.long_element()))
hull = set()
Ideals = d["ideals"]
for I in Ideals:
    b_set = set()
    for g in I:
        word = ab_to_s1s2(G,g)
        b_set = union_ideal(b_set, G, word)
    core = core.intersection(b_set)
    hull = hull.union(b_set)
print(len(core))
print(len(hull))
abc_core = {s1s2_to_ab(G,sword) for sword in core}
abc_hull = {s1s2_to_ab(G,sword) for sword in hull}
print(abc_core)
print(abc_hull)
core_perp = perp(G, core)
hull_perp = perp(G, hull)

print(generating_set(G,core))
print(core_perp == hull)
print(hull_perp == core)

